namespace Week10ChallengeLab {
    internal class Solution {

        // are given two strings s and t.
        // String t is generated by random shuffling string s and then
        // add one more letter at a random position.
        // Return the letter that was added to t.
        internal static void Part1() {
            string input1 = GetInput<string>("Enter first string: ");
            string input2 = GetInput<string>("Enter second string: ");

            int result = 0;

            foreach (char letter in input1) result ^= letter;
            foreach (char letter in input2) result ^= letter;

            Console.WriteLine($"Added Letter: {(char)result}");
        }

        // You are given two integer arrays nums1 and nums2, sorted in non-decreasing order,
        // and two integers m and n, representing the number of elements in nums1 and nums2
        // respectively.
        // Merge nums1 and nums2 into a single array sorted in non-decreasing order.
        // The final sorted array should not be returned by the function, but instead be stored
        // inside the array nums1. To accommodate this, nums1 has a length of m + n, where the
        // first m elements denote the elements that should be merged, and the last n elements
        // are set to 0 and should be ignored. nums2 has a length of n.
        internal static void Part2() {
            int m = GetInput<int>("Enter m: ");
            int n = GetInput<int>("Enter n: ");

            int[] nums1 = new int[m + n];
            int[] nums2 = new int[n];

            Console.WriteLine($"Enter {m} elements for nums1:");
            for (int i = 0; i < m; i++) nums1[i] = GetInput<int>($"nums1[{i}]: ");

            Console.WriteLine($"Enter {n} elements for nums2:");
            for (int i = 0; i < n; i++) nums2[i] = GetInput<int>($"nums2[{i}]: ");

            int p1 = m - 1, 
                p2 = n - 1, 
                p = m + n - 1;

            while (p1 >= 0 && p2 >= 0)
                nums1[p--] = nums1[p1] > nums2[p2] ? nums1[p1--] : nums2[p2--];

            while (p2 >= 0)
                nums1[p--] = nums2[p2--];

            Console.WriteLine("Merged array:");
            Console.WriteLine(string.Join(", ", nums1));
        }

        private static T GetInput<T>(string prompt) {
            Console.Write(prompt);
            try {
                return (T)Convert.ChangeType(Console.ReadLine(), typeof(T));
            } catch (Exception exception) {
                Console.WriteLine(exception.Message);
                return GetInput<T>(prompt);
            }
        }
    }
}